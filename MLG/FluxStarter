### A Pluto.jl notebook ###
# v0.12.17

using Markdown
using InteractiveUtils

# ╔═╡ 3c1afde0-3cd3-11eb-1334-d778fc425486
begin #imports
	using Gadfly,Flux,DataFrames
	using CSV:File
end

# ╔═╡ 91429d00-3cd3-11eb-085c-b5d30d88a3e6
begin #running this cell sets our data and target
train=File("FluxTrain")|>DataFrame
select!(train,Not(:Column1))
select!(train,Not("timeDelta(ms)"))
data=map(x->Vector(x),eachrow(train))
target=[pop!(x) for x in data] # get our target
end

# ╔═╡ 5f9ccd10-3cde-11eb-1eca-1dff34dd11d9
train

# ╔═╡ f569dec0-3cdc-11eb-2668-5d5c1639944e
plot(train,y="error(ms)")#),color=:Ly))
#	 layer(train,y=:Lx))

# ╔═╡ 0770d10e-3dae-11eb-1ed1-4b72209bf969
model=Chain(Dense(6,1))#,
#	x->(0.5σ.(x).+x),
#Dense(1,2,rrelu),softmax)

# ╔═╡ 5ff026b2-3dae-11eb-25b1-2b53501c0691
model(data)

# ╔═╡ 717c92e0-3db0-11eb-35eb-25e778d1a03f
begin
	x=0.5
	evalcb = () -> @show(loss(X, Y))
end

# ╔═╡ 8bcf5010-3db0-11eb-38a9-b9b283903511
Flux.train!(Flux.mse(model(data[1]),target),params(model),data,ADAM(),cb = Flux.throttle(evalcb, 10))

# ╔═╡ f1057fe0-3db0-11eb-3f9e-ab059c81b33a
data

# ╔═╡ 9280f50e-3db2-11eb-1d01-f9dda744e73d
rand(3,2)

# ╔═╡ 78978b90-3db3-11eb-0419-654c56e8e5bf
ata#=[[pop!(x) for x in data] for _ in (1:6)]

# ╔═╡ Cell order:
# ╠═3c1afde0-3cd3-11eb-1334-d778fc425486
# ╠═91429d00-3cd3-11eb-085c-b5d30d88a3e6
# ╠═5f9ccd10-3cde-11eb-1eca-1dff34dd11d9
# ╠═f569dec0-3cdc-11eb-2668-5d5c1639944e
# ╠═0770d10e-3dae-11eb-1ed1-4b72209bf969
# ╠═5ff026b2-3dae-11eb-25b1-2b53501c0691
# ╠═717c92e0-3db0-11eb-35eb-25e778d1a03f
# ╠═8bcf5010-3db0-11eb-38a9-b9b283903511
# ╠═f1057fe0-3db0-11eb-3f9e-ab059c81b33a
# ╠═9280f50e-3db2-11eb-1d01-f9dda744e73d
# ╠═78978b90-3db3-11eb-0419-654c56e8e5bf
